# yaml-language-server: $schema=https://raw.githubusercontent.com/Azure/azure-dev/main/schemas/v1.0/azure.yaml.json

name: todo-nodejs-mongo
metadata:
  template: todo-nodejs-mongo@0.0.1-beta
workflows:
  up:
    steps:
      - azd: provision
      - azd: package
      - azd: deploy --all
      - azd: restore
services:
  web:
    project: ./src/web
    dist: dist
    language: js
    host: appservice
    hooks:
      # Creates a temporary `.env.local` file for the build command. Vite will automatically use it during build.
      # The expected/required values are mapped to the infrastructure outputs.
      # .env.local is ignored by git, so it will not be committed if, for any reason, if deployment fails.
      # see: https://vitejs.dev/guide/env-and-mode
      # Note: Notice that dotenv must be a project dependency for this to work. See package.json.
      prepackage:
        windows:
          shell: pwsh
          run: 'echo "VITE_API_BASE_URL=""$env:API_BASE_URL""" > .env.local ; echo "VITE_APPLICATIONINSIGHTS_CONNECTION_STRING=""$env:APPLICATIONINSIGHTS_CONNECTION_STRING""" >> .env.local'
        posix:
          shell: sh
          run: 'echo VITE_API_BASE_URL=\"$API_BASE_URL\" > .env.local && echo VITE_APPLICATIONINSIGHTS_CONNECTION_STRING=\"$APPLICATIONINSIGHTS_CONNECTION_STRING\" >> .env.local'
      postdeploy:
        windows:
          shell: pwsh
          run: "rm .env.local"
        posix:
          shell: sh
          run: "rm .env.local"
  api:
    project: ./src/api
    language: js
    host: appservice
    hooks:
      postdeploy:
        windows:
          shell: pwsh
          run: |
            Write-Output "AZD HOOK LOG : postdeploy api ================="
            Write-Output "AZD HOOK LOG : AZURE_ENV_NAME $env:AZURE_ENV_NAME "
          interactive: true
          continueOnError: false
        posix:
          shell: sh
          run: |
            echo "AZD HOOK LOG : postdeploy api ================="
            echo "AZD HOOK LOG : AZURE_ENV_NAME $AZURE_ENV_NAME "
          interactive: true
          continueOnError: false
hooks:
  # 1. azd up
  preup:
    windows:
      shell: pwsh
      run: |
        Write-Output "AZD HOOK LOG : preup ================="
        Write-Output "AZD HOOK LOG : AZURE_ENV_NAME $env:AZURE_ENV_NAME "
      interactive: true
      continueOnError: false
    posix:
      shell: sh
      run: |
        echo "AZD HOOK LOG : preup ================="
        echo "AZD HOOK LOG : AZURE_ENV_NAME $AZURE_ENV_NAME "
      interactive: true
      continueOnError: false
  postup: # test Interactive set false
    windows:
      shell: pwsh
      run: ./hooks/1.ps1 "postup error :test Interactive set false"
      interactive: false
      continueOnError: false
    posix:
      shell: sh
      run: ./hooks/1.sh "postup error :test Interactive set false"
      interactive: false
      continueOnError: false

  # 2. azd provision
  preprovision:
    windows:
      shell: pwsh
      run: |
        Write-Output "AZD HOOK LOG : preprovision ================="
        Write-Output "AZD HOOK LOG : AZURE_ENV_NAME $env:AZURE_ENV_NAME "
      interactive: true
      continueOnError: false
    posix:
      shell: sh
      run: |
        echo "AZD HOOK LOG : preprovision ================="
        echo "AZD HOOK LOG : AZURE_ENV_NAME $AZURE_ENV_NAME "
      interactive: true
      continueOnError: false
  postprovision:
    windows:
      shell: pwsh
      run: ./hooks/1.ps1 postprovision
      interactive: true
      continueOnError: false
    posix:
      shell: sh
      run: ./hooks/1.sh postprovision
      interactive: true
      continueOnError: false

  # 3. azd package
  # test continueOnError
  prepackage:
    windows:
      shell: pwsh
      run: |
        Write-Output "AZD HOOK LOG : prepackage ================="
        Write-Output "AZD HOOK LOG : AZURE_ENV_NAME $env:AZURE_ENV_NAME "
        Write-Output "test continueOnError "
        Write-Outpu
      interactive: true
      continueOnError: true
    posix:
      shell: sh
      run: |
        echo "AZD HOOK LOG : prepackage ================="
        echo "AZD HOOK LOG : AZURE_ENV_NAME $AZURE_ENV_NAME "
        echo "test continueOnError "
        ech
      interactive: true
      continueOnError: true
  postpackage:
    windows:
      shell: pwsh
      run: ./hooks/1.ps1 postpackage
      interactive: true
      continueOnError: false
    posix:
      shell: sh
      run: ./hooks/1.sh postpackage
      interactive: true
      continueOnError: false

  # 4. azd deploy
  predeploy:
    windows:
      shell: pwsh
      run: |
        Write-Output "AZD HOOK LOG : predeploy ================="
        Write-Output "AZD HOOK LOG : AZURE_ENV_NAME $env:AZURE_ENV_NAME "
      interactive: false
      continueOnError: true
    posix:
      shell: sh
      run: |
        echo "AZD HOOK LOG : postdeploy ================="
        echo "AZD HOOK LOG : AZURE_ENV_NAME $AZURE_ENV_NAME "
      interactive: false
      continueOnError: true
  postdeploy:
    windows:
      shell: pwsh
      run: ./hooks/1.ps1 postdeploy
      interactive: true
      continueOnError: false
    posix:
      shell: sh
      run: ./hooks/1.sh postdeploy

      interactive: true
      continueOnError: false

  # 5. azd restore
  # test Invalid file paths
  prerestore:
    windows:
      shell: pwsh
      run: |
        Write-Output "AZD HOOK LOG : prerestore ================="
        Write-Output "AZD HOOK LOG : AZURE_ENV_NAME $env:AZURE_ENV_NAME "
        Write-Output "test Invalid file paths "
      interactive: true
      continueOnError: true
    posix:
      shell: sh
      run: |
        echo "AZD HOOK LOG : prerestore ================="
        echo "AZD HOOK LOG : AZURE_ENV_NAME $AZURE_ENV_NAME "
        echo "test Invalid file paths "
      interactive: true
      continueOnError: true
  postrestore:
    windows:
      shell: pwsh
      run: ./xxx/1.ps1
      interactive: true
      continueOnError: false
    posix:
      shell: sh
      run: ./xxx/1.sh
      interactive: true
      continueOnError: false

  # 6. azd down
  predown:
    windows:
      shell: pwsh
      run: ./hooks/1.ps1 predown
      interactive: true
      continueOnError: false
    posix:
      shell: sh
      run: ./hooks/1.sh predown
      interactive: true
      continueOnError: false
  postdown:
    windows:
      shell: pwsh
      run: |
        Write-Output "AZD HOOK LOG : predown ================="
        Write-Output "AZD HOOK LOG : AZURE_ENV_NAME $env:AZURE_ENV_NAME "
      interactive: true
      continueOnError: false
    posix:
      shell: sh
      run: |
        echo "AZD HOOK LOG : postdown ================="
        echo "AZD HOOK LOG : AZURE_ENV_NAME $AZURE_ENV_NAME "
      interactive: true
      continueOnError: false